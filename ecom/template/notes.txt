Notes : 

Create a Folder for project

1. Install Environment [ pip Install venv ] 
2. Create venv [ venv venv_name]
3. Activate venv [ env_name\scripts\activate ]
4. install django [ pip install django ]
5. Create a project [ django-admin startproject project_name ]
6. Run Project : Change Current Directory [cd project_name] [python manage.py runserver]
7. Create App : python manage.py startapp app_name
8. Create a New View in Views.py
9. Then add a url in the urls.py
10. create a templte and static Folder
11. Change Django Default Port
12. Default django Port : 8000
python manage.py runserver 8000
python manage.py runserver 8001
python3 -m venv django_venv		//create virtual Environment 
source ./django_venv/bin/active 	//activate virtual Environment
pip3 install django			//install django
django-admin startproject firstDjangoProject //create project
$cd firstDjangoProject			//to start server
python3 manage.py runserver
3. Again Run Project
	venv_name\scripts\activate
    cd project_name
    python manage.py runserver
    
 4. Create New App Inside The Project    

 	python manage.py startapp app_name
	python manage.py startapp myapp

	127.0.0.1.8000
	127.0.0.1 [Localhost]	.8000 [Port]	

	3306	SQL
	5000	Html\CSS
	3000	React
	404	Page Not Found


5. views.py File

 1. Function Based View

	Before Creating Function :
	Import : from django.http import HttpResponce
    then:
	create function using Request and HttpResponce

    	Ex : def show(request)
		   return HttpResponce("<h1>Hello Ashitosh</h1>")

	Open : urls.py
		  After Creating Function 		   

import : from django.urls import path
 from myapp import views
		   [import views file from the newly cereated app name 'myapp']
		   Add Path : path('path_name/',file_name.function_name)
		   path('show/',views.show),

		   Save File And Open Link
		   Add the path
		i.e : http://127.0.0.1:8000/show/


=========================================================================================================================================================================


	* For Multiple Parameter In Function
	viwes.py
		def details(request,name):
    		return HttpResponse(name)

			urls.py
		path('details/<name>',views.details),	
				http://127.0.0.1:8000/details/Ashitosh
								or


		views.py
		def details(request,name,rollno):
    			return HttpResponse("Name : "+name + "RollNO : "+rollno)

				urls.py
    		path('details/<name>/<rollno>/',views.details),
					http://127.0.0.1:8000/details/Ashitosh/111/
					
=========================================================================================================================================================================


  2.class based view


========================================================================================================================================================================
6. Adding HTML and CSS Folders 

	MVT Architecture
	user -> url -> view -> model -> template
1) HTML
	- create folder with name 'template' in the main project
	- in template folder create html files.

	open urls.py 
	- import : from myapp import views
		- add path : path('pathname/',viwes.html_file_name)
				   : path('home/',views.home)

	open views.py

	# add html file in function		
	from django.shortcuts import render
	from django.http import HttpResponse			   
		def home(request):
    		return render(request,'home.html')
2) CSS
	- create folder with name 'static' in the main project
	- in static folder create css,js,images folder
	- in css folder create css file
		connect css file with html file
		<!DOCTYPE html>
			{%load static%}
	<html lang="en">
		<link rel="stylesheet" href="{%static 'css/style.css'%}">
=========================================================================================================================================================================
# make changes in settings.py file
	add created app in INSTALLED_APPS = ['app_name',]
		Above template import os

	in template add template folder path 
	 ['DIRS': [os.path.join(BASE_DIR,'template')],]

	 	in STATIC_URLS add path : 
	[STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]]
=========================================================================================================================================================================
# Dictionary
	Create and display dictionary in the template views.py
	1) IN Function add a empty dictionary
	2) pass the dictionary in the return
		EX :

	from django.shortcuts import render
		from django.http import HttpResponse
	# Create your views here.
		def hello(request):
	    a=10
	    b=20	
	    c=a+b
		context = {}
	    context['a']=a
	    context['b']=b
	    context['c']=c
			return render(request,'home.html',context)

=========================================================================================================================================================================

# For Loop
	Syntax : 
		{% for i in sequence %}
		{{i}}
		{% endfor %}

	- for forloop first we have to define a dictionary in views.py	
	- also assign a value in dictionary in key value pair

		 
	<h4>For Loop</h4><br>
    
    	<h4>a = {{a}}</h4>
    	<h4>b = {{b}}</h4>
    	<h4>c  = {{c}}</h4>
    	{% for i in a %}
    
    	{% if i|divisibleby:2 %}
    	{{i}} <br>   
    	{% endif %}
        
    	{% endfor %}

	* If Else In Django
	Syntax : 

	{% if condition %}
	{{ if code }}
	{% elif condition %}
	{% else %}
	{% endif %}

		 - value i.e b,c are mention in the dictionary on views.py file
		 	 {% if b > c %}
	    <h3>{{b}} is Grater than {{c}}</h3>
			    {% else %}
	    <h3>{{c}} is Grater than {{b}}</h3>
	{% endif %}

	=========================================================================================================================================================================
# Python And SQL Connections
	# Mysql connection using python
	# modules:
	# 1.mysql connector
	# 2.pymysql
		# step 1):install pymysql
	'''command:- pip install pymysql'''

		# Step 2):Create Connection
	# Syntax:
		'''connection=pymysql.connect(
	    host="localhost",
	    user="your user name",
	    password="your password",
	    database="Your Database")'''

			import pymysql
	import pymysql.cursors
		connection=pymysql.connect(
	    host="localhost",
	    user="root",
	    password="1234",
	    database="p432")
			print("Mysql connected successfully !!!")

	cursor=connection.cursor()
	# cursor.execute("create table student1(id int,name varchar(40),marks int);")			
		print("Table created successfully !!!")
			# to insert the values in the table
				cursor.execute("insert into student1 values(1,'tejas',100);")
			connection.commit()		
		print("Inserted values succefully !!!")		

	# to fetch the data of table
	cursor.execute("select * from student1")			

	# to display the values from table	
	for i in cursor.fetchall():
	    print(i)	

=========================================================================================================================================================================
# CRUD Operations
	- Create, Read, Update, Delete
	crud : this time use default database [DB SQL Lite]	

1) Create :	
	1) create a class with class name and get default parameter models.Model
	2) Create a DB Table with col-name and datatype 
		in Model.py
	class Student(models.Model):
	first_name = models.CharField(max_length=30)
	last_name = models.CharField(max_length=30)
	address = models.CharField(max_length=100)	
	mobile = models.CharField(max_length=11)
	email = models.EmailField(max_length=30)
	course = models.CharField(max_length=30)
	rollno = models.IntegerField()	
	
	After
		- after creating a model we can use a makemigrations and migrate 
	- makemigration command convert code into SQL Schema
	- migrate create table according to schema
		- python manage.py makemigrations
	- python manage.py migrate [remove the migration error]

	After : 
	then : install DB Browser 'sqllite' [one time]	
	- to check the table is created.
	After :
	then : goto myapp -> itrations for check the 0001_initial.py file is created

	- ID : In the table ID Bydefault Genrated

	ORM - object relational mapping/mapper [app and sql connection]

	Q.what is use of migrate and migrations


# Then : HTML file
	- Create a html form to submit data also add name field in input tag
	- in the from used a CSRF token for data security, without token data can't submit

csrf : Cross-Site Request Forgery
	- uset to secure a data from malware attacks
	- csrfmiddlewaretoken used to secure a data and incript the data each and every page refresh



# Then : views.py

	- create a function
	- always give a function path in urls.py file
	- check the form method [GET/POST]

		Ex : 
	def home(request):
    	    if request.method == 'POST':
                fn = request.POST["first_name"]
	print(fn)

==================================================================================================

# Store Data To Backend/Database
	QuerySet = list of all django orm quries
	Syntax to send data into DB

		- Model.objects.create(field=values)==>sql
	  [insert into table(cols) values(value)]

	  	Ex : stud = Student.objects.create(name=n,rollno=r)

In Views.py		
	Create a object and fetch all value from html table.

	- first import the Model [ from .models import Student ]
	- get value from the html form
	EX : 	n = request.POST['name']
        	r = request.POST['rollNumber']

	- stud=Student.objects.create(first_name=fn,last_name=ln,address=a,mobile=m,email=e,course=c,rollno=r)
	  stud.save()
	  	then objectname.save() to save the changes
	Note : model.py and views object value are always same

	Example : 

def index(request):	
    if request.method == 'POST':
        n = request.POST['name']
        r = request.POST['rollNumber']
        s = request.POST['subject']	
        stud = Student.objects.create(name=n,rollNumber=r,subject=s)
        stud.save()
        return redirect('/index/')	
	else:    
        return render(request,'index.html')		

=========================================================================================================================================================================

2) Read

	# Fetch data from backend and display it on HTML TABLE.
	#in Views.py

	- import redirect [for same page form and table or redirect anywhere]
	i.e = [ from django.shortcuts import render,redirect ]
	